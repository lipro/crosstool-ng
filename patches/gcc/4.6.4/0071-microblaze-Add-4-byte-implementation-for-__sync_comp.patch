From 4feea2a436bd01d2aced5df6e8b2a7bee9c562bf Mon Sep 17 00:00:00 2001
From: David Holsgrove <david.holsgrove@petalogix.com>
Date: Thu, 19 Jul 2012 13:18:15 +1000
Subject: [PATCH 71/79] microblaze: Add 4 byte implementation for __sync_compare_and_swap atomic builtin

By providing this initial atomic implementation, gcc is able to generate the other atomic
builtins by using a __sync_compare_and_swap loop

1,2,8 byte implementations not currently supported and will still result in undefined
reference from linker

Signed-off-by: David Holsgrove <david.holsgrove@petalogix.com>
---
 gcc/config/microblaze/constraints.md |    5 ++++
 gcc/config/microblaze/microblaze.c   |    9 +++++++
 gcc/config/microblaze/microblaze.md  |    3 ++
 gcc/config/microblaze/sync.md        |   44 ++++++++++++++++++++++++++++++++++
 4 files changed, 61 insertions(+), 0 deletions(-)
 create mode 100644 gcc/config/microblaze/sync.md

diff --git a/gcc/config/microblaze/constraints.md b/gcc/config/microblaze/constraints.md
index 2abe301..20507cb 100644
--- a/gcc/config/microblaze/constraints.md
+++ b/gcc/config/microblaze/constraints.md
@@ -70,3 +70,8 @@
   "Double word operand."
   (and (match_code "mem")
        (match_test "double_memory_operand (op, GET_MODE (op))")))
+
+(define_memory_constraint "Q"
+  "Memory operand which fits in single register."
+  (and (match_code "mem")
+       (match_test "GET_CODE ( XEXP (op, 0)) == REG")))
diff --git a/gcc/config/microblaze/microblaze.c b/gcc/config/microblaze/microblaze.c
index 24c6abf..17ecf9c 100755
--- a/gcc/config/microblaze/microblaze.c
+++ b/gcc/config/microblaze/microblaze.c
@@ -2429,6 +2429,15 @@ print_operand (FILE * file, rtx op, int letter)
 	rtx op4 = adjust_address (op, GET_MODE (op), 4);
 	output_address (XEXP (op4, 0));
       }
+      else if (letter == 'y')
+      {
+	rtx mem_reg = XEXP (op, 0);
+        if (GET_CODE (mem_reg) == REG)
+	{
+	  register int regnum = REGNO (mem_reg);
+	  fprintf (file, "%s", reg_names[regnum]);
+	}
+      }
     else
       output_address (XEXP (op, 0));
 
diff --git a/gcc/config/microblaze/microblaze.md b/gcc/config/microblaze/microblaze.md
index 8356bb1..c481f35 100755
--- a/gcc/config/microblaze/microblaze.md
+++ b/gcc/config/microblaze/microblaze.md
@@ -41,6 +41,7 @@
   (UNSPEC_CMP		    104)    ;; signed compare
   (UNSPEC_CMPU		    105)    ;; unsigned compare
   (UNSPEC_TLS           106)    ;; jump table
+  (UNSPEC_SYNC_CAS      107)    ;; Represent an atomic compare swap.
 ])
 
 
@@ -2325,3 +2326,5 @@
   microblaze_eh_return(operands[0]);
   DONE;
 }")
+
+(include "sync.md")
diff --git a/gcc/config/microblaze/sync.md b/gcc/config/microblaze/sync.md
new file mode 100644
index 0000000..5cb5dd9
--- /dev/null
+++ b/gcc/config/microblaze/sync.md
@@ -0,0 +1,44 @@
+;; Machine description for Xilinx MicroBlaze synchronization instructions.
+;; Copyright 2009, 2010 Free Software Foundation, Inc.
+;;
+;; Contributed by David Holsgrove david.holsgrove@petalogix.com
+;;
+;; This file is part of GCC.
+;;
+;; GCC is free software; you can redistribute it and/or modify
+;; it under the terms of the GNU General Public License as published by
+;; the Free Software Foundation; either version 3, or (at your option)
+;; any later version.
+;;
+;; GCC is distributed in the hope that it will be useful,
+;; but WITHOUT ANY WARRANTY; without even the implied warranty of
+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+;; GNU General Public License for more details.
+;;
+;; You should have received a copy of the GNU General Public License
+;; along with GCC; see the file COPYING3.  If not see
+;; <http://www.gnu.org/licenses/>.
+
+(define_insn "sync_compare_and_swapsi"
+  [(set (match_operand:SI 0 "register_operand" "=&d")          	;; retval
+        (match_operand:SI 1 "nonimmediate_operand" "+Q"))      	;; mem
+    (set (match_dup 1)
+	(unspec
+	    [(match_operand:SI 2 "register_operand" "d")	;; oldval
+	     (match_operand:SI 3 "register_operand" "d")]	;; newval
+			     UNSPEC_SYNC_CAS))
+   (clobber (match_scratch:SI 4 "=&d"))]			;; scratch
+  ""
+  {
+    output_asm_insn ("addc \tr0,r0,r0", operands);
+    output_asm_insn ("lwx  \t%0,%y1,r0", operands);
+    output_asm_insn ("addic\t%4,r0,0", operands);
+    output_asm_insn ("bnei \t%4,.-8", operands);
+    output_asm_insn ("cmp  \t%4,%0,%2", operands);
+    output_asm_insn ("bnei \t%4,.+16", operands);
+    output_asm_insn ("swx  \t%3,%y1,r0", operands);
+    output_asm_insn ("addic\t%4,r0,0", operands);
+    output_asm_insn ("bnei \t%4,.-28", operands);
+    return "";
+  }
+)
-- 
1.7.1

