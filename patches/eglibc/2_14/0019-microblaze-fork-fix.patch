From 5a8679b211d53442804f9f08e101c15ef6f961a3 Mon Sep 17 00:00:00 2001
From: Edgar E. Iglesias <edgar.iglesias@gmail.com>
Date: Mon, 6 Feb 2012 10:39:42 +0100
Subject: [PATCH 19/41] microblaze: fork fix

Just a dump for David to test & compare.

Signed-off-by: Edgar E. Iglesias <edgar.iglesias@gmail.com>
---
 nptl/sysdeps/unix/sysv/linux/microblaze/fork.c   |   12 +-
 sysdeps/unix/sysv/linux/microblaze/bits/fcntl.h  |   14 +-
 sysdeps/unix/sysv/linux/microblaze/bits/stat.h   |  223 ++++++++++++----------
 sysdeps/unix/sysv/linux/microblaze/clone.S       |    2 +-
 sysdeps/unix/sysv/linux/microblaze/kernel_stat.h |   35 ++++
 5 files changed, 179 insertions(+), 107 deletions(-)

diff --git a/nptl/sysdeps/unix/sysv/linux/microblaze/fork.c b/nptl/sysdeps/unix/sysv/linux/microblaze/fork.c
index d31889e..f71b2e2 100644
--- a/nptl/sysdeps/unix/sysv/linux/microblaze/fork.c
+++ b/nptl/sysdeps/unix/sysv/linux/microblaze/fork.c
@@ -1 +1,11 @@
-#include <sysdeps/unix/sysv/linux/i386/fork.c>
+#include <sched.h>
+#include <signal.h>
+#include <sysdep.h>
+#include <tls.h>
+
+#define ARCH_FORK() \
+  INLINE_SYSCALL (clone, 5,                                                   \
+                  CLONE_CHILD_SETTID | CLONE_CHILD_CLEARTID | SIGCHLD, 0,     \
+                  NULL, NULL, &THREAD_SELF->tid)
+
+#include "../fork.c"
diff --git a/sysdeps/unix/sysv/linux/microblaze/bits/fcntl.h b/sysdeps/unix/sysv/linux/microblaze/bits/fcntl.h
index 071d01e..e02b341 100644
--- a/sysdeps/unix/sysv/linux/microblaze/bits/fcntl.h
+++ b/sysdeps/unix/sysv/linux/microblaze/bits/fcntl.h
@@ -46,13 +46,17 @@
 #define O_ASYNC		 020000
 
 #ifdef __USE_GNU
-# define O_DIRECTORY	 040000	/* Must be a directory.	 */
-# define O_NOFOLLOW	0100000	/* Do not follow links.	 */
-# define O_DIRECT	0200000	/* Direct disk access.	*/
+# define O_DIRECT        040000 /* Direct disk access.  */
+# define O_DIRECTORY    0200000 /* Must be a directory.  */
+# define O_NOFOLLOW     0400000 /* Do not follow links.  */
 # define O_NOATIME     01000000 /* Do not set atime.  */
 # define O_CLOEXEC     02000000 /* Set close_on_exec.  */
 #endif
 
+#ifdef __USE_LARGEFILE64
+# define O_LARGEFILE    0100000
+#endif
+
 /* For now Linux has synchronisity options for data and read operations.
    We define the symbols here but let them do the same as O_SYNC since
    this is a superset.	*/
@@ -61,10 +65,6 @@
 # define O_RSYNC	O_SYNC	/* Synchronize read operations.	 */
 #endif
 
-#ifdef __USE_LARGEFILE64
-# define O_LARGEFILE	0400000
-#endif
-
 /* Values for the second argument to `fcntl'.  */
 #define F_DUPFD		0	/* Duplicate file descriptor.  */
 #define F_GETFD		1	/* Get file descriptor flags.  */
diff --git a/sysdeps/unix/sysv/linux/microblaze/bits/stat.h b/sysdeps/unix/sysv/linux/microblaze/bits/stat.h
index 536445f..822d948 100644
--- a/sysdeps/unix/sysv/linux/microblaze/bits/stat.h
+++ b/sysdeps/unix/sysv/linux/microblaze/bits/stat.h
@@ -32,123 +32,150 @@
 #define _MKNOD_VER_SVR4		2
 #define _MKNOD_VER		_MKNOD_VER_LINUX /* The bits defined below.  */
 
-
-struct stat
-  {
-    __dev_t st_dev;			/* Device.  */
-    unsigned short int __pad1;
-#ifndef __USE_FILE_OFFSET64
-    __ino_t st_ino;			/* File serial number.	*/
-#else
-    __ino_t __st_ino;			/* 32bit file serial number.	*/
-#endif
-    __mode_t st_mode;			/* File mode.  */
-    __nlink_t st_nlink;			/* Link count.  */
-    __uid_t st_uid;			/* User ID of the file's owner.	*/
-    __gid_t st_gid;			/* Group ID of the file's group.*/
-    __dev_t st_rdev;			/* Device number, if device.  */
-    unsigned short int __pad2;
-	unsigned long	__pad3;
 #ifndef __USE_FILE_OFFSET64
-    __off_t st_size;			/* Size of file, in bytes.  */
-#else
-    __off64_t st_size;			/* Size of file, in bytes.  */
-#endif
-    __blksize_t st_blksize;		/* Optimal block size for I/O.  */
-	int		__pad4;
-
-#ifndef __USE_FILE_OFFSET64
-    __blkcnt_t st_blocks;		/* Number 512-byte blocks allocated. */
-#else
-    __blkcnt64_t st_blocks;		/* Number 512-byte blocks allocated. */
-#endif
+struct stat
+{
+        __dev_t         st_dev; /* Device. */
+        __ino_t         st_ino; /* File serial number. */
+        __mode_t        st_mode; /* File mode. */
+        __nlink_t       st_nlink; /* Link count. */
+        __uid_t         st_uid; /* User ID of the file's owner. */
+        __gid_t         st_gid; /* Group ID of the file's group. */
+        __dev_t         st_rdev; /* Device number, if device. */
+        unsigned long   __pad2;
+        __off_t         st_size; /* Size of file, in bytes. */
+        __blksize_t     st_blksize; /* Optimal block size for I/O. */
+        int             __pad3;
+        __blkcnt_t      st_blocks; /* Number 512-byte blocks allocated. */
 #ifdef __USE_MISC
-    /* Nanosecond resolution timestamps are stored in a format
-       equivalent to 'struct timespec'.  This is the type used
-       whenever possible but the Unix namespace rules do not allow the
-       identifier 'timespec' to appear in the <sys/stat.h> header.
-       Therefore we have to handle the use of this header in strictly
-       standard-compliant sources special.  */
-    struct timespec st_atim;		/* Time of last access.  */
-    struct timespec st_mtim;		/* Time of last modification.  */
-    struct timespec st_ctim;		/* Time of last status change.  */
-# define st_atime st_atim.tv_sec	/* Backward compatibility.  */
+        /* Nanosecond resolution timestamps are stored in a format
+         * equivalent to 'struct timespec'. This is the type used
+         * whenever possible but the Unix namespace rules do not allow the
+         * identifier 'timespec' to appear in the <sys/stat.h> header.
+         * Therefore we have to handle the use of this header in strictly
+         * standard-compliant sources special. */
+        struct timespec         st_atim; /* Time of last access. */
+        struct timespec         st_mtim; /* Time of last modification. */
+        struct timespec         st_ctim; /* Time of last status change. */
+# define st_atime st_atim.tv_sec        /* Backward compatibility. */
 # define st_mtime st_mtim.tv_sec
 # define st_ctime st_ctim.tv_sec
 #else
-    __time_t st_atime;			/* Time of last access.  */
-    unsigned long int st_atimensec;	/* Nscecs of last access.  */
-    __time_t st_mtime;			/* Time of last modification.  */
-    unsigned long int st_mtimensec;	/* Nsecs of last modification.  */
-    __time_t st_ctime;			/* Time of last status change.  */
-    unsigned long int st_ctimensec;	/* Nsecs of last status change.  */
+        __time_t                st_atime; /* Time of last access. */
+        unsigned long int       st_atimensec; /* Nscecs of last access. */
+        __time_t                st_mtime; /* Time of last modification. */
+        unsigned long int       st_mtimensec; /* Nsecs of last modification. */
+        __time_t                st_ctime; /* Time of last status change. */
+        unsigned long int       st_ctimensec; /* Nsecs of last status change. */
 #endif
-#ifndef __USE_FILE_OFFSET64
-    unsigned long int __unused4;
-    unsigned long int __unused5;
+        unsigned int    __unused4;
+        unsigned int    __unused5;
+};
+#else /* __USE_FILE_OFFSET64 */
+/* MS: If __USE_FILE_OFFSET64 is setup then struct stat should match stat64
+ * structure. Glibc has no type __dev64_t that's why I had to use standard
+ * type for st_dev and st_rdev. Several architectures uses pads after st_dev
+ * but this approach covers BIG and LITTLE endian. I think it is better to
+ * create one ifdef to separate stats structures. */
+struct stat
+{
+        unsigned long long      st_dev; /* Device. */
+        __ino64_t               st_ino; /* 32bit file serial number. */
+        __mode_t                st_mode; /* File mode. */
+        __nlink_t               st_nlink; /* Link count. */
+        __uid_t                 st_uid; /* User ID of the file's owner. */
+        __gid_t                 st_gid; /* Group ID of the file's group. */
+        unsigned long long      st_rdev; /* Device number, if device. */
+        unsigned long long      __pad2;
+        __off64_t               st_size; /* Size of file, in bytes. */
+        __blksize_t             st_blksize; /* Optimal block size for I/O. */
+        int                     __pad3;
+        __blkcnt64_t            st_blocks; /* Number 512-byte blocks allocated. */
+#ifdef __USE_MISC
+        /* Nanosecond resolution timestamps are stored in a format
+         * equivalent to 'struct timespec'. This is the type used
+         * whenever possible but the Unix namespace rules do not allow the
+         * identifier 'timespec' to appear in the <sys/stat.h> header.
+         * Therefore we have to handle the use of this header in strictly
+         * standard-compliant sources special. */
+        struct timespec         st_atim; /* Time of last access. */
+        struct timespec         st_mtim; /* Time of last modification. */
+        struct timespec         st_ctim; /* Time of last status change. */
+# define st_atime st_atim.tv_sec        /* Backward compatibility. */
+# define st_mtime st_mtim.tv_sec
+# define st_ctime st_ctim.tv_sec
 #else
-    __ino64_t st_ino;			/* File serial number.	*/
+        __time_t                st_atime; /* Time of last access. */
+        unsigned long int       st_atimensec; /* Nscecs of last access. */
+        __time_t                st_mtime; /* Time of last modification. */
+        unsigned long int       st_mtimensec; /* Nsecs of last modification. */
+        __time_t                st_ctime; /* Time of last status change. */
+        unsigned long int       st_ctimensec; /* Nsecs of last status change. */
 #endif
-  };
+        unsigned int    __unused4;
+        unsigned int    __unused5;
+};
+#endif /* __USE_FILE_OFFSET64 */
 
 #ifdef __USE_LARGEFILE64
 struct stat64
-  {
-    __dev_t st_dev;			/* Device.  */
-    unsigned short int __pad1;
-
-    __ino_t __st_ino;			/* 32bit file serial number.	*/
-    __mode_t st_mode;			/* File mode.  */
-    __nlink_t st_nlink;			/* Link count.  */
-    __uid_t st_uid;			/* User ID of the file's owner.	*/
-    __gid_t st_gid;			/* Group ID of the file's group.*/
-    __dev_t st_rdev;			/* Device number, if device.  */
-    unsigned short int __pad2;
-	unsigned long	__pad3;
-    __off64_t st_size;			/* Size of file, in bytes.  */
-    __blksize_t st_blksize;		/* Optimal block size for I/O.  */
-	int		__pad4;
-    __blkcnt64_t st_blocks;		/* Number 512-byte blocks allocated. */
+{
+        unsigned long long      st_dev; /* Device. */
+        __ino64_t               st_ino; /* 32bit file serial number. */
+        __mode_t                st_mode; /* File mode. */
+        __nlink_t               st_nlink; /* Link count. */
+        __uid_t                 st_uid; /* User ID of the file's owner. */
+        __gid_t                 st_gid; /* Group ID of the file's group. */
+        unsigned long long      st_rdev; /* Device number, if device. */
+        unsigned long long      __pad2;
+        __off64_t               st_size; /* Size of file, in bytes. */
+        __blksize_t             st_blksize; /* Optimal block size for I/O. */
+        int                     __pad3;
+        __blkcnt64_t            st_blocks; /* Number 512-byte blocks allocated. */
 #ifdef __USE_MISC
-    /* Nanosecond resolution timestamps are stored in a format
-       equivalent to 'struct timespec'.  This is the type used
-       whenever possible but the Unix namespace rules do not allow the
-       identifier 'timespec' to appear in the <sys/stat.h> header.
-       Therefore we have to handle the use of this header in strictly
-       standard-compliant sources special.  */
-    struct timespec st_atim;		/* Time of last access.  */
-    struct timespec st_mtim;		/* Time of last modification.  */
-    struct timespec st_ctim;		/* Time of last status change.  */
+        /* Nanosecond resolution timestamps are stored in a format
+         * equivalent to 'struct timespec'. This is the type used
+         * whenever possible but the Unix namespace rules do not allow the
+         * identifier 'timespec' to appear in the <sys/stat.h> header.
+         * Therefore we have to handle the use of this header in strictly
+         * standard-compliant sources special. */
+        struct timespec         st_atim; /* Time of last access. */
+        struct timespec         st_mtim; /* Time of last modification. */
+        struct timespec         st_ctim; /* Time of last status change. */
+# define st_atime st_atim.tv_sec        /* Backward compatibility. */
+# define st_mtime st_mtim.tv_sec
+# define st_ctime st_ctim.tv_sec
 #else
-    __time_t st_atime;			/* Time of last access.  */
-    unsigned long int st_atimensec;	/* Nscecs of last access.  */
-    __time_t st_mtime;			/* Time of last modification.  */
-    unsigned long int st_mtimensec;	/* Nsecs of last modification.  */
-    __time_t st_ctime;			/* Time of last status change.  */
-    unsigned long int st_ctimensec;	/* Nsecs of last status change.  */
+        __time_t                st_atime; /* Time of last access. */
+        unsigned long int       st_atimensec; /* Nscecs of last access. */
+        __time_t                st_mtime; /* Time of last modification. */
+        unsigned long int       st_mtimensec; /* Nsecs of last modification. */
+        __time_t                st_ctime; /* Time of last status change. */
+        unsigned long int       st_ctimensec; /* Nsecs of last status change. */
 #endif
-    __ino64_t st_ino;			/* File serial number.		*/
-  };
+        unsigned int    __unused4;
+        unsigned int    __unused5;
+};
 #endif
 
 /* Tell code we have these members.  */
-#define	_STATBUF_ST_BLKSIZE
+#define _STATBUF_ST_BLKSIZE
 #define _STATBUF_ST_RDEV
 /* Nanosecond resolution time values are supported.  */
 #define _STATBUF_ST_NSEC
 
 /* Encoding of the file mode.  */
 
-#define	__S_IFMT	0170000	/* These bits determine file type.  */
+#define __S_IFMT        0170000 /* These bits determine file type.  */
 
 /* File types.  */
-#define	__S_IFDIR	0040000	/* Directory.  */
-#define	__S_IFCHR	0020000	/* Character device.  */
-#define	__S_IFBLK	0060000	/* Block device.  */
-#define	__S_IFREG	0100000	/* Regular file.  */
-#define	__S_IFIFO	0010000	/* FIFO.  */
-#define	__S_IFLNK	0120000	/* Symbolic link.  */
-#define	__S_IFSOCK	0140000	/* Socket.  */
+#define __S_IFDIR       0040000 /* Directory.  */
+#define __S_IFCHR       0020000 /* Character device.  */
+#define __S_IFBLK       0060000 /* Block device.  */
+#define __S_IFREG       0100000 /* Regular file.  */
+#define __S_IFIFO       0010000 /* FIFO.  */
+#define __S_IFLNK       0120000 /* Symbolic link.  */
+#define __S_IFSOCK      0140000 /* Socket.  */
 
 /* POSIX.1b objects.  Note that these macros always evaluate to zero.  But
    they do it by enforcing the correct use of the macros.  */
@@ -158,11 +185,11 @@ struct stat64
 
 /* Protection bits.  */
 
-#define	__S_ISUID	04000	/* Set user ID on execution.  */
-#define	__S_ISGID	02000	/* Set group ID on execution.  */
-#define	__S_ISVTX	01000	/* Save swapped text after use (sticky).  */
-#define	__S_IREAD	0400	/* Read by owner.  */
-#define	__S_IWRITE	0200	/* Write by owner.  */
-#define	__S_IEXEC	0100	/* Execute by owner.  */
+#define __S_ISUID       04000   /* Set user ID on execution.  */
+#define __S_ISGID       02000   /* Set group ID on execution.  */
+#define __S_ISVTX       01000   /* Save swapped text after use (sticky).  */
+#define __S_IREAD       0400    /* Read by owner.  */
+#define __S_IWRITE      0200    /* Write by owner.  */
+#define __S_IEXEC       0100    /* Execute by owner.  */
 
 #endif	/* bits/stat.h */
diff --git a/sysdeps/unix/sysv/linux/microblaze/clone.S b/sysdeps/unix/sysv/linux/microblaze/clone.S
index 23a6f2c..915ec7e 100644
--- a/sysdeps/unix/sysv/linux/microblaze/clone.S
+++ b/sysdeps/unix/sysv/linux/microblaze/clone.S
@@ -31,7 +31,7 @@
    OUTGOING:
 
    linux: arch/microblaze/entry.S: sys_clone expects
-	r5 (flags)  r6(child stack) r7(stack_size) r8(ptid) r9(ctid)
+	r5 (flags)  r6(child stack) r7(stack_size) r8(ptid) r9(ctid) r10(tls)
 */
 
         .text
diff --git a/sysdeps/unix/sysv/linux/microblaze/kernel_stat.h b/sysdeps/unix/sysv/linux/microblaze/kernel_stat.h
index 6d635a0..a9508ff 100644
--- a/sysdeps/unix/sysv/linux/microblaze/kernel_stat.h
+++ b/sysdeps/unix/sysv/linux/microblaze/kernel_stat.h
@@ -1,4 +1,38 @@
 /* Definition of `struct stat' used in the kernel..  */
+/* Definition of `struct stat' used in the kernel..  */
+
+struct kernel_stat
+{
+        unsigned long   st_dev;         /* Device.  */
+        unsigned long   st_ino;         /* File serial number.  */
+        unsigned int    st_mode;        /* File mode.  */
+        unsigned int    st_nlink;       /* Link count.  */
+        unsigned int    st_uid;         /* User ID of the file's owner.  */
+        unsigned int    st_gid;         /* Group ID of the file's group. */
+        unsigned long   st_rdev;        /* Device number, if device.  */
+        unsigned long   __pad2;
+#define _HAVE_STAT___PAD2
+#define _HAVE_STAT64___PAD2
+        long            st_size;        /* Size of file, in bytes.  */
+        int             st_blksize;     /* Optimal block size for I/O.  */
+        int             __pad3;
+#define _HAVE_STAT___PAD3
+#define _HAVE_STAT64___PAD3
+        long            st_blocks;      /* Number 512-byte blocks allocated. */
+        struct timespec st_atim;
+        struct timespec st_mtim;
+        struct timespec st_ctim;
+#define _HAVE_STAT_NSEC
+#define _HAVE_STAT64_NSEC
+        unsigned int    __unused4;
+#define _HAVE_STAT___UNUSED4
+#define _HAVE_STAT64___UNUSED4
+        unsigned int    __unused5;
+#define _HAVE_STAT___UNUSED5
+#define _HAVE_STAT64___UNUSED5
+};
+
+#if 0
 struct kernel_stat
   {
     unsigned short int st_dev;
@@ -41,3 +75,4 @@ struct kernel_stat
 #define _HAVE_STAT64___PAD4
 #define _HAVE_STAT64___ST_INO
 #define _HAVE_STAT64_NSEC
+#endif
-- 
1.7.1

