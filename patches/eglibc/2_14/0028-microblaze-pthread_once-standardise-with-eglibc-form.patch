From e52cc1b0edf0297efbf445e06abc48f611d33646 Mon Sep 17 00:00:00 2001
From: David Holsgrove <david.holsgrove@petalogix.com>
Date: Mon, 23 Apr 2012 11:55:18 +1000
Subject: [PATCH 28/41] microblaze: pthread_once - standardise with eglibc format

change lll_futex_wait to wait on oldval not newval

Signed-off-by: David Holsgrove <david.holsgrove@petalogix.com>
---
 .../unix/sysv/linux/microblaze/pthread_once.c      |   63 +++++++++----------
 1 files changed, 30 insertions(+), 33 deletions(-)

diff --git a/nptl/sysdeps/unix/sysv/linux/microblaze/pthread_once.c b/nptl/sysdeps/unix/sysv/linux/microblaze/pthread_once.c
index ddfd32b..a9e6f84 100644
--- a/nptl/sysdeps/unix/sysv/linux/microblaze/pthread_once.c
+++ b/nptl/sysdeps/unix/sysv/linux/microblaze/pthread_once.c
@@ -20,10 +20,8 @@
 #include "pthreadP.h"
 #include <lowlevellock.h>
 
-
 unsigned long int __fork_generation attribute_hidden;
 
-
 static void
 clear_once_control (void *arg)
 {
@@ -33,41 +31,43 @@ clear_once_control (void *arg)
   lll_futex_wake (once_control, INT_MAX, LLL_PRIVATE);
 }
 
-
 int
-__pthread_once (once_control, init_routine)
-     pthread_once_t *once_control;
-     void (*init_routine) (void);
+__pthread_once (pthread_once_t *once_control, void (*init_routine) (void))
 {
-  while (1)
+  for (;;)
     {
-      int oldval, val, newval;
-
-      val = *once_control;
+      int oldval;
+      int newval;
+
+      /* Pseudo code:
+	 newval = __fork_generation | 1;
+	 oldval = *once_control;
+	 if ((oldval & 2) == 0)
+	   *once_control = newval;
+	 Do this atomically.
+      */
       do
 	{
-	  /* Check if the initialized has already been done.  */
-	  if ((val & 2) != 0)
+	  newval = __fork_generation | 1;
+	  oldval = *once_control;
+	  if (oldval & 2)
+	    break;
+	} while (atomic_compare_and_exchange_val_acq (once_control, newval, oldval) != oldval);
+
+      /* Check if the initializer has already been done.  */
+      if ((oldval & 2) != 0)
 	    return 0;
 
-	  oldval = val;
-	  newval = (oldval & 3) | __fork_generation | 1;
-	  val = atomic_compare_and_exchange_val_acq (once_control, newval,
-						     oldval);
-	}
-      while (__builtin_expect (val != oldval, 0));
-
       /* Check if another thread already runs the initializer.	*/
-      if ((oldval & 1) != 0)
-	{
-	  /* Check whether the initializer execution was interrupted
-	     by a fork.	 */
-	  if (((oldval ^ newval) & -4) == 0)
-	    {
+      if ((oldval & 1) == 0)
+	break;
+
+      /* Check whether the initializer execution was interrupted by a fork.  */
+      if (oldval != newval)
+	break;
+
 	      /* Same generation, some other thread was faster. Wait.  */
-	      lll_futex_wait (once_control, newval, LLL_PRIVATE);
-	      continue;
-	    }
+      lll_futex_wait (once_control, oldval, LLL_PRIVATE);
 	}
 
       /* This thread is the first here.  Do the initialization.
@@ -79,14 +79,11 @@ __pthread_once (once_control, init_routine)
 
       pthread_cleanup_pop (0);
 
-
-      /* Add one to *once_control.  */
-      atomic_increment (once_control);
+      /* Say that the initialisation is done.  */
+      *once_control = __fork_generation | 2;
 
       /* Wake up all other threads.  */
       lll_futex_wake (once_control, INT_MAX, LLL_PRIVATE);
-      break;
-    }
 
   return 0;
 }
-- 
1.7.1

